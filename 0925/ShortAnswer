1.
	MOV, ADD, SUB
	
2.
	Calling convention(호출 규약)은 함수가  매개 변수를 전달하고 반환값을 돌려주는 규약이다.
	

3.
	어셈블리 지시어를 상요해 스택 세그먼트를 정의함

4.
	assembler(어셈블러)는 번역기를 말하는 것이고,언어 자체는 assembly language로 표현함.

5.
	Big endian: 가장 상위 바이트(MSB)를 낮은 메모리 주소에 저장.
	Little endian: 가장 하위 바이트(LSB)를 낮은 메모리 주소에 저장.
	기원: Jonathan Swift의 소설 걸리버 여행기에서 "큰 쪽(Big End)으로 계란을 깨는 파"와 "작은 쪽(Little End)으로 깨는 파"에서 따옴.

6.
	가독성이 좋아지고 유지보수가 편리함.
	특정 값이 바뀌면 코드 전체를 고칠 필요 없이 한 곳에서만 수정하면 됨

7.
	소스 파일: 프로그래머가 작성한 원본 어셈블리 코드.
	리스트 파일: 어셈블러가 생성하는 출력으로, 소스 코드 + 기계어 번역 + 주소 + 에러 메시지 등을 포함.

8.
	데이터 레이블: 메모리에 저장된 변수나 상수를 참조할 때 사용.
	코드 레이블: 프로그램 실행 흐름 제어(분기, 점프 등)에 사용.

9.
	참.

10.
	참.

11.
	거짓
	지시어는 어셈블러가 번역할때만 의미가 있고, 실행시간에는 아무동작하지 않음.
	
12.	
	참.
	
13.
	레이블(label) – 선택적, 코드 위치 표시
	명령어(mnemonic) – 실제 연산 (예: MOV, ADD)
	피연산자(operands) – 명령어에 필요한 데이터 (예: 레지스터, 메모리, 상수)
	주석(comment) – 사람이 읽기 위한 설명

14.	
	참.

15.	
	참.

16.	
	/*
	~~
	*/
	;
	
17.
	프로그램 가독성이 떨어지며 유지보수가 어려움

18.
	종료 코드(exit code, 32비트 정수)를 인자로 전달해야 함.

19.	
	ENDP

20. 
	프로그램의 entry point를 지정함.

21.
	프로시저의 프로토타입을 선언하여, 호출시 매개변수와 반환 형식을 어셈블러가 확인 할수있게함.

22.	
	거짓.
	오브젝트 파일은 어셈블러가 생성하고 링커는 여러 오브젝트 파일을 연결해 실행파일을 만듦.

23.	
	참.

24.
	참.

25.	
	SDWORD

26.
	SWORD
	
27. 
	QWORD

28. 
	SBYTE
	
29.
	TBYTE
	
Algorithm Workbench
	
1. 	
	DEC25 = 25        ; 10진수
	BIN25 = 11001b    ; 2진수
	OCT25 = 31o       ; 8진수
	HEX25 = 19h       ; 16진수	
	
2.
	
3. 	
	myDword BYTE 12h, 34h, 56h, 78h  ; Big endian 순서
	
4.
	myVal DWORD -25

5.
	.code
	main PROC
    add eax, 5     ; EAX에 5 더하기
    add edx, 5     ; EDX에 5 더하기
    ret
	main ENDP
	END main
	
6. 
	ABh, 89h, 67h, 45h

7. 
	
8.	
	letters BYTE 'A','B','C','D','E'
	
9.	
	minVal SDWORD -2147483648
	
10. 	
	wArray WORD 1000h, 2000h, 3000h

11.
	colorName BYTE "BLUE",0

12. 


13.
	bigStr BYTE 500 DUP("TEST")

14.
	bArray BYTE 20 DUP(0)




	